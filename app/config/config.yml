imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: @SOSVeloUserBundle/Resources/config/services.yml }

framework:
    #esi:             ~
    translator:      { fallback: %locale% }
    secret:          %secret%
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_proxies: ~
    session:         ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            %kernel.debug%
    strict_variables: %kernel.debug%

# Assetic Configuration
assetic:
    debug:          %kernel.debug%
    use_controller: false
    #bundles:        [ ]
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        #closure:
        #    jar: %kernel.root_dir%/Resources/java/compiler.jar
        #yui_css:
        #    jar: %kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar
#    resource: .
#    type:     assetic
    assets:
        jquery_and_skel_js:
            inputs:
                - '@SOSVeloTemplateBundle/Resources/public/js/jquery.min.js'
                - '@SOSVeloTemplateBundle/Resources/public/js/jquery.dropotron.min.js'
                - '@SOSVeloTemplateBundle/Resources/public/js/jquery.scrollgress.min.js'
                - '@SOSVeloTemplateBundle/Resources/public/js/skel.min.js'
                - '@SOSVeloTemplateBundle/Resources/public/js/skel-layers.min.js'
                - '@FOSCommentBundle/Resources/assets/js/comments.js'
        skel_css:
            inputs:
                - '@SOSVeloTemplateBundle/Resources/public/css/skel.css'
                - '@SOSVeloTemplateBundle/Resources/public/css/style.css'
                - '@SOSVeloTemplateBundle/Resources/public/css/style-wide.css'

# Doctrine Configuration
doctrine:
    dbal:
        driver:   %database_driver%
        host:     %database_host%
        port:     %database_port%
        dbname:   heroku_106ade01e332d47
        user:     %database_user%
        password: %database_password%
        charset:  UTF8
        types:
            json: Sonata\Doctrine\Types\JsonType
        # if using pdo_sqlite as your database driver, add the path in parameters.yml
        # e.g. database_path: %kernel.root_dir%/data/data.db3
        # path:     %database_path%

    orm:
        auto_generate_proxy_classes: %kernel.debug%
        entity_managers:
            default:
                auto_mapping: true
#                mappings:
#                    SOSVeloUserBundle: ~
#                    SonataUserBundle: ~
#                    FOSUserBundle: ~

# Swiftmailer Configuration
swiftmailer:
    transport: %mailer_transport%
    host:      %mailer_host%
    username:  %mailer_user%
    password:  %mailer_password%
    spool:     { type: memory }

nelmio_api_doc: ~

fos_user:
    db_driver: orm
    firewall_name: main
    user_class: SOSVelo\Bundle\UserBundle\Entity\User
#    SOSVelo\Bundle\UserBundle\Entity\User
    registration:
        form:
            type: sosvelo_user_registration
    group:
            group_class:   SOSVelo\Bundle\UserBundle\Entity\Group
            group_manager: sonata.user.orm.group_manager                    # If you're using doctrine orm (use sonata.user.mongodb.user_manager for mongodb)
    service:
        user_manager: sonata.user.orm.user_manager                      # If you're using doctrine orm (use sonata.user.mongodb.group_manager for mongodb)

sonata_user:
    security_acl:           false

    manager_type: orm # Can be orm or mongodb

    impersonating:
            route: sonata_admin_dashboard

    table:
        user_group: "my_custom_user_group_association_table_name"

    impersonating:
        route:                page_slug
        parameters:           { path: / }

    class:                  # Entity Classes
        user:               SOSVelo\Bundle\UserBundle\Entity\User
        group:              SOSVelo\Bundle\UserBundle\Entity\Group

    admin:                  # Admin Classes
        user:
            class:          Sonata\UserBundle\Admin\Entity\UserAdmin
            controller:     SonataAdminBundle:CRUD
            translation:    SonataUserBundle

        group:
            class:          Sonata\UserBundle\Admin\Entity\GroupAdmin
            controller:     SonataAdminBundle:CRUD
            translation:    SonataUserBundle

#    profile:
#        default_avatar: 'bundles/sonatauser/default_avatar.png' # Default avatar displayed if user doesn't have one
#        # As in SonataAdminBundle's dashboard
#        dashboard:
#            groups:
#
#                # Prototype
#                id:
#                    label:                ~
#                    label_catalogue:      ~
#                    items:                []
#                    item_adds:            []
#                    roles:                []
#            blocks:
#                type:                 ~
#                settings:
#
#                    # Prototype
#                    id:                   []
#                position:             right
#        register:
#            # You may customize the registration forms over here
#            form:
#                type:                 sonata_user_registration
#                handler:              sonata.user.registration.form.handler.default
#                name:                 sonata_user_registration_form
#                validation_groups:
#
#                    # Defaults:
#                    - Registration
#                    - Default
#            # This allows you to specify where you want your user redirected once he activated his account
#            confirm:
#                redirect:
#                    # Set it to false to disable redirection
#                    route: 'sonata_user_profile_show'
#                    route_parameters: ~
#
#        # Customize user portal menu by setting links
#        menu:
#            - { route: 'sonata_user_profile_edit', label: 'link_edit_profile', domain: 'SonataUserBundle'}
#            - { route: 'sonata_user_profile_edit_authentication', label: 'link_edit_authentication', domain: 'SonataUserBundle'}
#
#        # Profile Form (firstname, lastname, etc ...)
#        form:
#            type:               sonata_user_profile
#            handler:            sonata.user.profile.form.handler.default
#            name:               sonata_user_profile_form
#            validation_groups:  [Profile]

# override FOSUser default serialization
jms_serializer:
    metadata:
        directories:
            - { path: %kernel.root_dir%/../vendor/sonata-project/user-bundle/Sonata/UserBundle/Resources/config/serializer/FOSUserBundle, namespace_prefix: 'FOS\UserBundle' }

fos_comment:
    db_driver: orm
    class:
        model:
            comment: SOSVelo\Bundle\PointBundle\Entity\PointComment
            thread: SOSVelo\Bundle\PointBundle\Entity\PointCommentThread
            vote: SOSVelo\Bundle\PointBundle\Entity\PointCommentVote
    acl: true
    service:
        acl:
            thread:  fos_comment.acl.thread.roles
            comment: fos_comment.acl.comment.roles
            vote:    fos_comment.acl.vote.roles
        manager:
            thread:  fos_comment.manager.thread.acl
            comment: fos_comment.manager.comment.acl
            vote:    fos_comment.manager.vote.acl
    acl_roles:
        comment:
            create: IS_AUTHENTICATED_ANONYMOUSLY
            view: IS_AUTHENTICATED_ANONYMOUSLY
            edit: ROLE_ADMIN
            delete: ROLE_ADMIN
        thread:
            create: IS_AUTHENTICATED_ANONYMOUSLY
            view: IS_AUTHENTICATED_ANONYMOUSLY
            edit: ROLE_ADMIN
            delete: ROLE_ADMIN
        vote:
            create: IS_AUTHENTICATED_ANONYMOUSLY
            view: IS_AUTHENTICATED_ANONYMOUSLY
            edit: ROLE_ADMIN
            delete: ROLE_ADMIN

fos_message:
    db_driver: orm
    thread_class: SOSVelo\Bundle\UserBundle\Entity\UserMessageThread
    message_class: SOSVelo\Bundle\UserBundle\Entity\UserMessage

assetic:
    bundles: [ "FOSUserBundle", "FOSCommentBundle", "SOSVeloTemplateBundle", "FOSMessageBundle" ]

sonata_user:
    security_acl: true
    manager_type: orm # can be orm or mongodb

sonata_block:
    default_contexts: [cms]
    blocks:
#        sonata.user.block.menu:    # used to display the menu in profile pages
#        sonata.user.block.account: # used to display menu option (login option)
#        sonata.block.service.text: # used to if you plan to use Sonata user routes
        # Enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts:   [admin]
        # Your other blocks

sonata_admin:
    title:      SOSVelo Admin
    title_logo: bundles/sosvelotemplate/img/sosvelo/sosvelo_logo.png

services:
    sosvelo.point.admin.point:
      class: SOSVelo\Bundle\PointBundle\Admin\PointAdmin
      tags:
        - { name: sonata.admin, manager_type: orm, group: Points Service, label: Points }
      arguments: [null, SOSVelo\Bundle\PointBundle\Entity\Point, SOSVeloPointBundle:PointAdmin]
    sosvelo.point.admin.demande:
     class: SOSVelo\Bundle\PointBundle\Admin\DemandeAdmin
     tags:
       - { name: sonata.admin, manager_type: orm, group: Points Service, label: Demands }
     arguments: [null, SOSVelo\Bundle\PointBundle\Entity\Demande, SOSVeloPointBundle:DemandeAdmin]
    sosvelo.point.admin.pointcomment:
        class: SOSVelo\Bundle\PointBundle\Admin\PointCommentAdmin
        tags:
          - { name: sonata.admin, manager_type: orm, group: Points Service, label: Comments }
        arguments: [null, SOSVelo\Bundle\PointBundle\Entity\PointComment, SOSVeloPointBundle:PointCommentAdmin]
    sosvelo.point.admin.pointservice:
           class: SOSVelo\Bundle\PointBundle\Admin\PointServiceAdmin
           tags:
             - { name: sonata.admin, manager_type: orm, group: Points Service, label: Service Types }
           arguments: [null, SOSVelo\Bundle\PointBundle\Entity\PointService, SOSVeloPointBundle:PointServiceAdmin]
